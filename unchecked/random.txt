OBJWritePalB(u32 src, u32 destOffset, u32 len) = 02056738	//OBJ Palette B write
OBJWritePalA(u32 src, u32 destOffset, u32 len) = 020567A0	//OBJ Palette A write
BGWritePalB(u32 src, u32 destOffset, u32 len) = 02056808	//BG Palette B write
BGWritePalA(u32 src, u32 destOffset, u32 len) = 02056870	//BG Palette A write
IsCapLost = 02013B18
ModelBase() = 02017150	//Model has a base class? Sets up the vtable and the second, unknown value

//Unknown struct still to be investigated (0x02092144)
extern UnknownStruct UNKNOWN_ARR[4];
struct UnknownStruct
{
    unsigned unk00;
    unsigned unk04;
    uint16_t unk08;
    uint16_t buttonsHeld;
    uint16_t cameraAngleY;
    uint16_t unk0e;
    unsigned unk10;
    unsigned unk14;
    unsigned unk18;
    unsigned unk1c;
    unsigned unk20;
};




//Unknown function from ActorBase
bool Func_02043880(ActorBase* actor){

	u8 shouldBeKilled = actor->shouldBeKilled;

	if(!shouldBeKilled){

		actor->shouldBeKilled = 0;
		u8 aliveState = actor->aliveState;

		if(aliveState){
			Func_0203B27C(FIRST_BEHAVIOUR_LIST_NODE, actor->behavNode);
			Func_0203B27C(FIRST_RENDER_LIST_NODE, actor->renderNode);
		}else{
			Func_0203B27C(0x020A4B88, actor->behavNode);
		}

		Func_0203B20C(0x020A4BA8, actor->behavNode);
		actor->aliveState = 2;

		if(!sceneNode->firstChild){
			return 1;
		}

		ActorBase::SceneNode* sn = sceneNode->firstChild;

		do{
			sn->actor->Destroy();
			sn = sn->nextSibling;
		}while(sn);

		return 1;

	}else{

		ActorBase* parent = actor->Func_02043810(); //getParentActor()

		if(parent){

			u8 punk13 = parent->unk13;

			if(punk13 & 1 || (!(punk13 & 1) && (punk13 & 2)){	
				actor->unk13 |= 2;
			}else{
				//!(punk13 & 2)

				if(actor->unk13 & 2){
					actor->unk13 &= ~2;
				}

			}

			//5C
			if(punk13 & 4 || (!(punk13 & 4) && (punk13 & 8)){
				actor->unk13 |= 8;
			}else{
				//!(punk13 & 8)

				if(actor->unk13 & 8){
					actor->unk13 &= ~8;
				}

			}
		
		}

		u8 aliveState = actor->aliveState;

		if(aliveState == 1){

			if(actor->behavNode.priority != actor->behavNode.priorityCopy){
				Func_0203B27C(FIRST_BEHAVIOUR_LIST_NODE, actor->behavNode);
				actor->behavNode.priority = actor->behavNode.priorityCopy;
				Func_0204405C(FIRST_BEHAVIOUR_LIST_NODE, actor->behavNode);
			}

			if(actor->renderNode.priority != actor->renderNode.priorityCopy){
				Func_0203B27C(FIRST_RENDER_LIST_NODE, actor->renderNode);
				actor->renderNode.priority = actor->renderNode.priorityCopy;
				Func_0204405C(FIRST_RENDER_LIST_NODE, actor->renderNode);
			}

		}else if(aliveState == 2){
			return 1;
		}else{

			if(actor->unk11){
				actor->unk11 = 0;
				Func_0203B244(0x020A4B88, actor->behavNode);
			}else if(actor->unk10){
				actor->unk10 = 0;
				Func_0204405C(FIRST_BEHAVIOUR_LIST_NODE, actor->behavNode);
				Func_0204405C(FIRST_RENDER_LIST_NODE, actor->renderNode);
				actor->aliveState = 1;
			}

		}

		return 1;

	}

}


//Equivalent ghidra output

void FUN_02043880(int param_1)

{
  undefined4 uVar1;
  undefined4 uVar2;
  int iVar3;
  
  if (*(char *)(param_1 + 0xf) == '\0') {
    iVar3 = func_0x02043810();
    if (iVar3 != 0) {
      if (((*(byte *)(iVar3 + 0x13) & 1) == 0) && ((*(byte *)(iVar3 + 0x13) & 2) == 0)) {
        if ((*(byte *)(param_1 + 0x13) & 2) != 0) {
          *(byte *)(param_1 + 0x13) = *(byte *)(param_1 + 0x13) & 0xfd;
        }
      }
      else {
        *(byte *)(param_1 + 0x13) = *(byte *)(param_1 + 0x13) | 2;
      }
      if (((*(byte *)(iVar3 + 0x13) & 4) == 0) && ((*(byte *)(iVar3 + 0x13) & 8) == 0)) {
        if ((*(byte *)(param_1 + 0x13) & 8) != 0) {
          *(byte *)(param_1 + 0x13) = *(byte *)(param_1 + 0x13) & 0xf7;
        }
      }
      else {
        *(byte *)(param_1 + 0x13) = *(byte *)(param_1 + 0x13) | 8;
      }
    }
    uVar2 = _DAT_02043ab8;
    uVar1 = _DAT_02043ab0;
    if (*(char *)(param_1 + 0xe) == '\x01') {
      if (*(short *)(param_1 + 0x36) != *(short *)(param_1 + 0x34)) {
        func_0x0203b27c(_DAT_02043ab0,param_1 + 0x28);
        uVar1 = _DAT_02043ab0;
        *(undefined2 *)(param_1 + 0x34) = *(undefined2 *)(param_1 + 0x36);
        func_0x0204405c(uVar1);
      }
      if (*(short *)(param_1 + 0x46) != *(short *)(param_1 + 0x44)) {
        func_0x0203b27c(_DAT_02043ab4,param_1 + 0x38);
        uVar1 = _DAT_02043ab4;
        *(undefined2 *)(param_1 + 0x44) = *(undefined2 *)(param_1 + 0x46);
        func_0x0204405c(uVar1);
      }
    }
    else {
      if (*(char *)(param_1 + 0xe) != '\x02') {
        if (*(char *)(param_1 + 0x11) == '\0') {
          if (*(char *)(param_1 + 0x10) != '\0') {
            *(undefined *)(param_1 + 0x10) = 0;
            func_0x0204405c(uVar1,param_1 + 0x28);
            func_0x0204405c(_DAT_02043ab4,param_1 + 0x38);
            *(undefined *)(param_1 + 0xe) = 1;
          }
        }
        else {
          *(undefined *)(param_1 + 0x11) = 0;
          func_0x0203b244(uVar2,param_1 + 0x28);
        }
      }
    }
  }
  else {
    *(undefined *)(param_1 + 0xf) = 0;
    if (*(char *)(param_1 + 0xe) == '\x01') {
      func_0x0203b27c(_DAT_02043ab0,param_1 + 0x28);
      func_0x0203b27c(_DAT_02043ab4,param_1 + 0x38);
    }
    else {
      func_0x0203b27c(_DAT_02043ab8,param_1 + 0x28);
    }
    func_0x0203b20c(_DAT_02043abc,param_1 + 0x28);
    *(undefined *)(param_1 + 0xe) = 2;
    iVar3 = *(int *)(param_1 + 0x18);
    while (iVar3 != 0) {
      func_0x02043824(*(undefined4 *)(iVar3 + 0x10));
      iVar3 = *(int *)(iVar3 + 0xc);
    }
  }
                    /* WARNING: Bad instruction - Truncating control flow here */
  halt_baddata();
}